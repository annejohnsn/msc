interface(rtablesize=500);

#=== ordering and partial sums of Z_2 with p-adic metric ===#
rho2_1 := proc (x, y) options operator, arrow; Fraction(1, 2^ordp(x-y, 2)) end proc;
S := ComputePadicProductOrdering(100, [2]);
ComputePartialRhoSeq(S, rho2_1);
#take the nth root to see what the capacity is approaching
g := x -> root[x-1](ComputePartialRhoSeq(ComputePadicProductOrdering(x, [2]), rho2_1))
map(g, [seq(i, i = 1 ..100)])

#=== ordering and partial sums of Z_2 x Z_2 with infinity metric ===#
rho2_2 := proc (x_1, x_2, y_1, y_2) options operator, arrow; d:= max(Fraction(1, 2^ordp(x_1-y_1, 2)), Fraction(1, 2^ordp(x_2-y_2, 2))); return d; end proc;
S := ComputePadicProductOrdering(100, [2, 2]);
ComputePartialRhoSeq(S, rho2_2);
g := x -> root[x-1](ComputePartialRhoSeq(ComputePadicProductOrdering(x, [2,2]), rho2_2))

#=== ordering and partial sums of Z_2 x Z_3 with infinity metric ===#
rho23_2 := proc (x_1, x_2, y_1, y_2) options operator, arrow; d:= max(Fraction(1, 2^ordp(x_1-y_1, 2)), Fraction(1, 3^ordp(x_2-y_2, 3))); return d; end proc;
S := ComputePadicProductOrdering(101, [2, 3]);
ComputePartialRhoSeq(S, rho23_2);
g := x -> root[x-1](ComputePartialRhoSeq(ComputePadicProductOrdering(x, [2,3]), rho23_2))


#=== use a more rapidly convergent subsequence to speed up calculations ===#
# use Z_2 x Z_2 to get started
A := Matrix([[0,0],[0,1]]); # set A to be the B_1(0x0) U B_1(0x1) (the other piece of Z_2 x Z_2 is A + (1,0))
g := proc (x) options operator, arrow; root[2*x-1](FastPartialRhoSeq(x, A, [2, 2], rho2_2)) end proc
map(g, [seq(i, i = 1 .. 100)])
g(500);